# -*- coding: utf-8 -*-
"""week14資料科學

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RsOAVJx4QSfTB8_H8iuqucY2GoGvKTpl
"""

def find_bmi(height, weight):
    bmi = weight / (height/100)**2
    if bmi > 30:
        bmi_index = 'Obese'
    elif bmi > 25:
        bmi_index = 'Overweight'
    elif bmi > 18.5:
        bmi_index = 'Normal weight'
    else:
        bmi_index = 'Underweight'
    bmi_dict = {
        'bmi_value': bmi,
        'bmi_index': bmi_index
    }
    return bmi_dict

find_bmi(198, 129)

def find_bmi(height, weight):
    bmi = weight / (height/100)**2
    if bmi > 30:
        bmi_index = 'Obese'
    elif bmi > 25:
        bmi_index = 'Overweight'
    elif bmi > 18.5:
        bmi_index = 'Normal weight'
    else:
        bmi_index = 'Underweight'
    return bmi, bmi_index # output as a tuple

find_bmi(198, 129)

#寫作一個函數 get_circle_metrics() 預設計算面積、但亦可以計算周長

def get_circle_metrics(r, is_area=True):
    """
    依據半徑計算圓形面積或周長
    """
    pi = 3.14156
    if is_area:
        return pi*r**2   #算面積
    else:
        return 2*pi*r    #算周長
# Use
help(get_circle_metrics)
print(get_circle_metrics(3))
print(get_circle_metrics(3, False))

#寫作一個函數 get_circle_metrics() 計算面積以及周長

# Define
def get_circle_metrics(r):
    """
    依據半徑計算圓形面積以及周長
    """
    pi = 3.14156
    area = pi*r**2
    perimeter = 2*pi*r
    return area, perimeter
# Use
print(get_circle_metrics(3))
print(type(get_circle_metrics(3)))
circle_area, circle_perimeter = get_circle_metrics(3)
print(circle_area)
print(circle_perimeter)

#彈性參數

def create_prices(*args):
    return args

create_prices(25, 35, 45, 60)

def create_prices(*args):
    for arg in args:
        print("$ {:3}".format(arg))

create_prices(25, 35, 45, 60, 100)

#**kwargs 讓使用者使用函數時傳入多個 dict-like 參數

def print_menu(**kwargs):
    return kwargs

print_menu(black_tea=25, bubble_tea=35, ice_cream_tea=40)

def print_menu(**kwargs):
    for k, v in kwargs.items():
        print("{:15}: ${:3}".format(k, v))

print_menu(black_tea=25, bubble_tea=35, ice_cream_tea=40)

f = open("starwars.txt", "w")

f.close()

f = open("starwars.txt", "w")
f.write("Starwars: A New Hope")
f.close()

f = open("starwars.txt", "a")
f.write("Starwars: The Empire Strikes Back")
f.write("Starwars: Return of the Jedi")
f.close()

#斷行要加反斜線n \n

f = open("starwars.txt", "a")
f.write("Starwars: The Empire Strikes Back\n")
f.write("Starwars: Return of the Jedi\n")
f.close()

f = open("starwars.txt", "r")
f.read()
f.close()

f = open("starwars.txt", "r")
for i in f:
    print(i)
f.close()

medium_prices = {
    'Black Tea': 20,
    'Green Tea': 20,
    'Oolong Tea': 25,
}
for v in medium_prices.values():
    print(v + 10)

def add_milk(x):
    return x + 10

for v in medium_prices.values():
    print(add_milk(v))

#map函數

list(map(add_milk, medium_prices.values()))

#lambda運用

list(map(lambda x : x + 10, medium_prices.values()))

list(map(lambda x : x * 9/5 + 32, [35, 34, 32]))

for t in [35, 34, 32]:
    print(t * 9/5 + 32)







